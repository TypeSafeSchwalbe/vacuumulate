
mod vacuumulate::gamestate

use vacuumulate::res
use vacuumulate::renderer::(CAMERA_POSITION, CAMERA_LOOK_AT, CAMERA_UP)

use std::(math, arr, iter, time, opt, str)
use std::rng::Random
use obem::(vec, input, afx, data)

pub proc create() {
    val gamestate = {
        menu = menu_hidden(),
        music_audio_source = afx::Source::new([0.0, 0.0, 0.0])
            .> loop(true)
            .> gain(10.0)
            .> play(res::BACKGROUND_TRACK .> get()),
        rng = Random::new(time::now_utc()),
        robot = {
            position = [0.0, 0.0, 0.0],
            rotation = 0.0,
            update = || {},
            audio_source = afx::Source::new([0.0, 0.0, 0.0])
        },
        update_collectables = true,
        debris = [],
        obstacles = [],
        smoke = [],
        explosion = #none unit,
        score = 0
    }
    gamestate.menu = menu_start(gamestate)
    gamestate |> add_debris(5)
    return gamestate
}

proc reset_gamestate(gamestate) {
    gamestate.robot = {
        position = [0.0, 0.0, 0.0],
        rotation = 0.0,
        update = || {},
        audio_source = afx::Source::new([0.0, 0.0, 0.0])
    }
    gamestate.robot.update = robot_movement(gamestate.robot)
    gamestate.update_collectables = true
    gamestate.debris = []
    gamestate.obstacles = []
    gamestate.smoke = []
    gamestate.explosion = #none unit
    gamestate.score = 0
    gamestate |> add_debris(5)
}

proc menu_start(gamestate) {
    return {
        title = "Vacuumulate",
        prompt = "Use the arrow keys to rotate the robot. Click anywhere to begin.",
        update = || {
            case input::mouse_button(input::MOUSE_LEFT) -> {
                gamestate.robot.update = robot_movement(gamestate.robot)
                gamestate.menu = menu_hidden()
            }
        }
    }
}

proc menu_hidden() {
    return {
        title = "",
        prompt = "",
        update = || {}
    }
}

proc menu_game_over(gamestate) {
    return {
        title = "That was too big.",
        prompt = "Click anywhere to try again.",
        update = || {
            case input::mouse_button(input::MOUSE_LEFT) -> {
                gamestate |> reset_gamestate()
                gamestate.menu = menu_hidden()
            }
        }
    }
}

proc in_room(pos, radius) {
    return pos[0] - radius > -10.0
        && pos[0] + radius < 10.0
        && pos[2] - radius > -5.0
        && pos[2] + radius < 5.0
}

val ROBOT_TURN_SPEED = 1.0
val ROBOT_MOVEMENT_SPEED = 1.5

proc robot_direction(robot) {
    return [
        math::cos(robot.rotation), 
        0.0, 
        math::sin(robot.rotation)
    ]
}

proc robot_movement(robot) {
    return || {
        case input::key(input::KEY_ARROW_LEFT) -> {
            robot.rotation = robot.rotation
                + ROBOT_TURN_SPEED * obem::delta_time()
        }
        case input::key(input::KEY_ARROW_RIGHT) -> {
            robot.rotation = robot.rotation
                - ROBOT_TURN_SPEED * obem::delta_time()
        }
        val velocity = robot
            |> robot_direction()
            |> vec::scale(ROBOT_MOVEMENT_SPEED)
            |> vec::scale(obem::delta_time())
        robot.position = robot.position
            |> vec::add(velocity)
        robot.audio_source .> position(robot.position)
        case !in_room(robot.position, 0.6) -> {
            robot.update = robot_reversal(robot)
        }
    }
}

proc robot_reversal(robot) {
    val start_time = time::now_utc()
    val duration = 2 |> time::seconds()
    val start_rotation = robot.rotation
    return || {
        val t = as_flt(time::now_utc() - start_time) / as_flt(duration)
        robot.rotation = start_rotation + t * math::PI
        case t >= 1.0 -> {
            robot.update = robot_movement(robot)
            // give it a small boost so it doesn't get stuck
            robot.position = robot.position
                |> vec::add(robot |> robot_direction() |> vec::scale(0.1))
        }
    }
}

proc robot_vibrate(gamestate) {
    val robot = gamestate.robot
    val start_position = robot.position
    val start_time = time::now_utc()
    val duration = 5 |> time::seconds()
    robot.audio_source
        .> gain(10.0)
        .> play(res::VIBRATE_SOUND .> get())
    return || {
        robot.position = start_position
            |> vec::add(vec::scale([
                gamestate.rng .> flt_in(-1.0, 1.0),
                0.0,
                gamestate.rng .> flt_in(-1.0, 1.0)
            ], obem::delta_time()))
        robot.audio_source 
            .> position(robot.position)
        case time::now_utc() > start_time + duration -> {
            robot.update = robot_smoke(gamestate)
        }
    }
}

proc robot_smoke(gamestate) {
    val robot = gamestate.robot
    val start_time = time::now_utc()
    val duration = 5 |> time::seconds()
    return || {
        val next_smoke_time = start_time
            + (length(gamestate.smoke) |> time::seconds())
        case time::now_utc() > next_smoke_time -> {
            gamestate.smoke = gamestate.smoke
                |> arr::concat([create_smoke(gamestate, robot.position)])
        }
        case time::now_utc() > start_time + duration -> {
            robot.update = robot_explode(gamestate)
        }
    }
}

proc robot_explode(gamestate) {
    val robot = gamestate.robot
    gamestate.explosion = #some create_explosion(gamestate, robot.position)
    val start_time = time::now_utc()
    val duration = 2 |> time::seconds()
    return || {
        case time::now_utc() > start_time + duration -> {
            robot.update = || {}
            gamestate.menu = menu_game_over(gamestate)
        }
    }
}

proc create_debris(gamestate) {
    val position = [
        gamestate.rng .> flt_in(-9.0, 9.0),
        0.01, 
        gamestate.rng .> flt_in(-4.0, 4.0)
    ]
    val textures = [
        res::DIRT_TEXTURE,
        res::DUST_TEXTURE
    ]
    val texture_idx = as_int(gamestate.rng .> flt_in(0.0, 9999.0))
        % length(textures)
    return {
        position = position,
        rotation = gamestate.rng .> flt_in(0.0, math::TAU),
        texture = textures[texture_idx] .> get(),
        audio_source = afx::Source::new(position)
            .> pitch(gamestate.rng .> flt_in(0.8, 1.2))
            .> gain(0.5)
            .> play(res::SPAWN_SOUND .> get())
    }
}

proc add_debris(gamestate, count) {
    val added = iter::repeat_over(|| create_debris(gamestate))
        |> iter::take(count)
        |> arr::collect()
    gamestate.debris = gamestate.debris
        |> arr::concat(added)
}

proc picked_up(pos, robot) {
    val distance = robot.position
        |> vec::sub(pos)
        |> vec::len()
    return distance < 0.4
}

proc update_debris(gamestate) {
    case !gamestate.update_collectables -> return unit
    val collected = gamestate.debris
        |> arr::iter()
        |> iter::filter(|debris| picked_up(debris.position, gamestate.robot))
        |> arr::collect()
    gamestate.score = gamestate.score
        + length(collected)
    collected
        |> arr::iter()
        |> iter::for_each(|debris| debris.audio_source
            .> gain(20.0)
            .> play(res::COLLECT_SOUND .> get())
        )
    gamestate.debris = gamestate.debris
        |> arr::iter()
        |> iter::filter(|debris| !picked_up(debris.position, gamestate.robot))
        |> arr::collect()
    case length(gamestate.debris) < 5 -> {
        gamestate |> add_debris(5)
    }
}

proc create_obstacle(gamestate) {
    val position = [
        gamestate.rng .> flt_in(-9.0, 9.0),
        0.01, 
        gamestate.rng .> flt_in(-4.0, 4.0)
    ]
    val valiants = [
        { model = res::APPLE_MODEL, texture = res::APPLE_TEXTURE },
        { model = res::PENCIL_MODEL, texture = res::PENCIL_TEXTURE }
    ]
    val last_valiant_idx = length(gamestate.obstacles) > 0 |> std::if_else_lazy(
        || gamestate.obstacles[length(gamestate.obstacles) - 1].valiant_idx,
        || 0
    )
    val valiant_idx = (last_valiant_idx + 1) % length(valiants)
    return {
        spawn_time = time::now_utc(),
        position = position,
        rotation = gamestate.rng .> flt_in(0.0, math::TAU),
        model = valiants[valiant_idx].model .> get(),
        texture = valiants[valiant_idx].texture .> get(),
        valiant_idx = valiant_idx,
        audio_source = afx::Source::new(position)
            .> pitch(gamestate.rng .> flt_in(0.8, 1.2))
            .> gain(0.8)
            .> play(res::SPAWN_SOUND .> get())
    }
}

proc add_obstacles(gamestate, count) {
    val added = iter::repeat_over(|| create_obstacle(gamestate))
        |> iter::take(count)
        |> arr::collect()
    gamestate.obstacles = gamestate.obstacles
        |> arr::concat(added)
}

val OBSTACLE_COOLDOWN = 2 |> time::seconds()

proc obstacle_picked_up(o, robot) {
    return picked_up(o.position, robot)
        && time::now_utc() > o.spawn_time + OBSTACLE_COOLDOWN 
}

val OBSTACLE_FREQUENCY = 3

proc update_obstacles(gamestate) {
    case !gamestate.update_collectables -> return unit
    case gamestate.score / OBSTACLE_FREQUENCY > length(gamestate.obstacles) -> {
        gamestate |> add_obstacles(1)
    }
    val collected = gamestate.obstacles
        |> arr::iter()
        |> iter::filter(|o| obstacle_picked_up(o, gamestate.robot))
        |> arr::collect()
    collected
        |> arr::iter()
        |> iter::for_each(|o| o.audio_source
            .> gain(20.0)
            .> play(res::COLLECT_SOUND .> get())
        )
    case length(collected) > 0 -> {
        gamestate.robot.update = robot_vibrate(gamestate)
        gamestate.update_collectables = false
    }
    gamestate.obstacles = gamestate.obstacles
        |> arr::iter()
        |> iter::filter(|o| !obstacle_picked_up(o, gamestate.robot))
        |> arr::collect()
}

proc create_smoke(gamestate, position) {
    val final_position = position
        |> vec::add([
            gamestate.rng .> flt_in(-0.5, 0.5),
            0.0,
            gamestate.rng .> flt_in(-0.5, 0.5)
        ])
    return {
        position = final_position,
        audio_source = afx::Source::new(final_position)
            .> pitch(gamestate.rng .> flt_in(0.8, 1.2))
            .> gain(4.0)
            .> play(res::SMOKE_SOUND .> get())
    }
}

val SMOKE_RISE_SPEED = 0.5

proc update_smoke(gamestate) {
    gamestate.smoke |> arr::iter() |> iter::for_each(|smoke| {
        smoke.position[1] = smoke.position[1]
            + SMOKE_RISE_SPEED * obem::delta_time()
    })
}

proc create_explosion(gamestate, position) {
    return {
        position = position,
        size = 1.0,
        audio_source = afx::Source::new(position)
            .> gain(10.0)
            .> play(res::EXPLOSION_SOUND .> get())
    }
}

val EXPLOSION_GROW_SPEED = 30.0

proc update_explosion(gamestate) {
    case gamestate.explosion {
        #some explosion -> {
            case explosion.size < 5000.0 -> {
                explosion.size = explosion.size
                * (1.0 + EXPLOSION_GROW_SPEED * obem::delta_time())
            }
        }
    } else {}
}

pub val DATA_HIGHSCORE = "highscore"

proc update_highscore(gamestate) {
    case !data::has(DATA_HIGHSCORE) -> {
        gamestate.score |> as_str() |> data::store(DATA_HIGHSCORE)
    }
    case data::get(DATA_HIGHSCORE) |> str::parse_int() {
        #none -> {
            gamestate.score |> as_str() |> data::store(DATA_HIGHSCORE)
        }
        #some highscore -> {
            case highscore < gamestate.score -> {
                gamestate.score |> as_str() |> data::store(DATA_HIGHSCORE)
            }
        }
    }
}

proc configure_listener() {
    afx::Listener::position(CAMERA_POSITION)
    afx::Listener::orientation(CAMERA_LOOK_AT, CAMERA_UP)
}

pub proc update(gamestate) {
    gamestate.menu.update()
    gamestate.robot.update()
    gamestate |> update_debris()
    gamestate |> update_obstacles()
    gamestate |> update_smoke()
    gamestate |> update_explosion()
    gamestate |> update_highscore()
    configure_listener()
}