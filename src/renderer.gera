
mod vacuumulate::renderer

use vacuumulate::res
use vacuumulate::gamestate::DATA_HIGHSCORE

use std::(arr, iter, str, opt)
use obem::gfx::(Shader, Surface, Mesh)
use obem::(lam, lav, data)

pub var CAMERA_POSITION = [0.0, 10.0, 10.0]
pub var CAMERA_LOOK_AT = [0.0, 0.0, -3.0]
pub var CAMERA_UP = [0.0, 1.0, 0.0]

pub proc create() {
    return {
        object_camera = lam::iden4x4(),
        shader = Shader::new(
            "
                attribute vec3 pos;
                attribute vec2 uv;
                varying vec2 f_uv;

                uniform mat4 u_view_projection;
                uniform mat4 u_model;

                void main(void) {
                    f_uv = uv;
                    gl_Position = u_view_projection * u_model * vec4(pos, 1.0);
                }
            ",
            "
                precision mediump float;
                varying vec2 f_uv;
                
                uniform sampler2D u_tex; 

                void main(void) {
                    gl_FragColor = texture2D(u_tex, f_uv);
                }
            "
        )
    }
}

proc set_object_camera(renderer) {
    var fov = std::math::PI * 0.3
    var aspect_ratio = (Surface::main() .> width() |> as_flt())
        / (Surface::main() .> height() |> as_flt())
    var camera_matrix = lam::perspective(fov, aspect_ratio, 0.01, 1000.0)
       |> lam::mul(lam::look_at(CAMERA_POSITION, CAMERA_LOOK_AT, CAMERA_UP))
    renderer.object_camera = camera_matrix
}

proc render_object(renderer, model_matrix, texture, mesh, depth_test) {
    renderer.shader .> uniform_mat("u_model", model_matrix)
    renderer.shader .> uniform_tex("u_tex", texture)
    renderer.shader .> uniform_mat("u_view_projection", renderer.object_camera)
    Surface::main() 
        .> draw_mesh(mesh, [3, 2], renderer.shader, depth_test)
}

proc as_ndc(pixel_pos) {
    return pixel_pos
        |> lav::div([
            Surface::main() .> width() |> as_flt(),
            Surface::main() .> height() |> as_flt()
        ])
        |> lav::mul([2.0, 2.0]) |> lav::sub([1.0, 1.0])
        |> lav::mul([1.0, -1.0])
}

proc render_sprite(renderer, position, size, texture, src_pos, src_size) {
    // this could be optimized by using a singular mesh with 
    // a model matrix and an orthographic projection matrix
    var top_left = position |> as_ndc()
    var bottom_right = position |> lav::add(size) |> as_ndc()
    var uv_bottom_left = src_pos
        |> lav::div([
            texture .> width() |> as_flt(), texture .> height() |> as_flt()
        ])
    var uv_top_right = src_pos
        |> lav::add(src_size)
        |> lav::div([
            texture .> width() |> as_flt(), texture .> height() |> as_flt()
        ])
    var mesh = Mesh::new(
        [
            top_left[0],     top_left[1],     0.0, uv_bottom_left[0], uv_top_right[1], 
            bottom_right[0], top_left[1],     0.0, uv_top_right[0],   uv_top_right[1],
            top_left[0],     bottom_right[1], 0.0, uv_bottom_left[0], uv_bottom_left[1],
            bottom_right[0], bottom_right[1], 0.0, uv_top_right[0],   uv_bottom_left[1]
        ], [
            2, 1, 0,
            3, 1, 2
        ]
    )
    renderer.shader .> uniform_mat("u_model", lam::iden4x4())
    renderer.shader .> uniform_tex("u_tex", texture)
    renderer.shader .> uniform_mat("u_view_projection", lam::iden4x4())
    Surface::main() 
        .> draw_mesh(mesh, [3, 2], renderer.shader, false)
}

var FONT_CHARS
    = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!.,:; ()"

proc render_text(renderer, position, size, text) {
    var char_width = size * 7.0 / 9.0
    var char_padding = size * 1.0 / 9.0
    var char_offset = char_width + char_padding
    0..length(text) |> iter::for_each(|i| {
        var c = text |> str::at(i)
        var c_font_idx = FONT_CHARS
            |> str::find(c) |> iter::next()
            |> opt::unwrap_or(length(FONT_CHARS))
        var drawn_pos = position
            |> lav::add([as_flt(i) * char_offset, 0.0])
        var drawn_size = [char_width, size]
        var src_pos = [as_flt(c_font_idx) * 8.0, 0.0]
        var src_size = [7.0, 9.0]
        renderer |> render_sprite(
            drawn_pos, drawn_size, res::FONT_TEXTURE .> get(), src_pos, src_size
        )
    })
}

proc rendered_text_width(size, text) {
    var char_width = size * 7.0 / 9.0
    var char_padding = size * 1.0 / 9.0
    return as_flt(length(text)) * char_width
        + as_flt(length(text) - 1) * char_padding
}

proc render_room(renderer) {
    renderer |> render_object(
        lam::iden4x4()
            |> lam::scale([10.0, 10.0, 10.0, 1.0])
            |> lam::mul(lam::translation([0.0, -0.01, 0.0])),
        res::ROOM_TEXTURE .> get(), res::ROOM_MODEL .> get(),
        true
    )
}

proc render_robot(renderer, robot) {
    var model_matrix = lam::translation(robot.position)
        |> lam::rotate_y(-robot.rotation)
        |> lam::rotate_y(std::math::PI)
    renderer |> render_object(
        model_matrix, res::ROBOT_TEXTURE .> get(), res::ROBOT_MODEL .> get(),
        true
    )
}

proc render_debris(renderer, debris) {
    var model_matrix = lam::translation(debris.position)
        |> lam::rotate_y(debris.rotation)
    renderer |> render_object(
        model_matrix, debris.texture, res::DEBRIS_MODEL .> get(),
        true
    )
}

proc render_obstacle(renderer, obstacle) {
    var model_matrix = lam::translation(obstacle.position)
        |> lam::rotate_y(obstacle.rotation)
    renderer |> render_object(
        model_matrix, obstacle.texture, obstacle.model,
        true
    )
}

proc render_smoke(renderer, smoke) {
    var scale_factor = 1.0 + smoke.position[1]
    var model_matrix = lam::translation(smoke.position)
            |> lam::scale([scale_factor, scale_factor, scale_factor, 1.0])
    renderer |> render_object(
        model_matrix, res::SMOKE_TEXTURE .> get(), res::SMOKE_MODEL .> get(),
        false
    )
}

proc render_explosion(renderer, explosion) {
    var model_matrix = lam::translation(explosion.position)
            |> lam::scale([explosion.size, explosion.size, explosion.size, 1.0])
    renderer |> render_object(
        model_matrix,
        res::EXPLOSION_TEXTURE .> get(), res::EXPLOSION_MODEL .> get(),
        false
    )
}

proc render_score(renderer, score) {
    var score_text = "hi _   _"
        |> str::fmt([data::get(DATA_HIGHSCORE), score |> as_str()])
    var screen_height = Surface::main() .> height() |> as_flt()
    renderer |> render_text(
        [50.0, 50.0], screen_height / 30.0, score_text)
}

proc render_menu(renderer, menu) {
    var screen_width = Surface::main() .> width() |> as_flt()
    var screen_height = Surface::main() .> height() |> as_flt()
    var title_size = screen_height / 10.0
    var prompt_size = screen_height / 40.0
    var padding_size = screen_height / 10.0
    var menu_size = title_size + padding_size + prompt_size
    var title_width = rendered_text_width(title_size, menu.title)
    var title_pos = [
        (screen_width - title_width) / 2.0, 
        (screen_height - menu_size) / 2.0
    ]
    renderer |> render_text(title_pos, title_size, menu.title)
    var prompt_width = rendered_text_width(prompt_size, menu.prompt)
    var prompt_pos = [
        (screen_width - prompt_width) / 2.0,
        (screen_height - menu_size) / 2.0 + title_size + padding_size
    ]
    renderer |> render_text(prompt_pos, prompt_size, menu.prompt)
}

pub proc render(renderer, gamestate) {
    var background = [95.0, 87.0, 79.0, 255.0]
        |> lav::scale(1.0 / 255.0)
    Surface::main() .> clear_color(background)
    renderer |> set_object_camera()
    renderer |> render_room()
    renderer |> render_robot(gamestate.robot)
    gamestate.debris
        |> arr::iter()
        |> iter::for_each(|debris| renderer |> render_debris(debris))
    gamestate.obstacles
        |> arr::iter()
        |> iter::for_each(|obstacle| renderer |> render_obstacle(obstacle))
    gamestate.smoke
        |> arr::iter()
        |> iter::for_each(|smoke| renderer |> render_smoke(smoke))
    case gamestate.explosion {
        #some explosion -> renderer |> render_explosion(explosion)
    } else {}
    renderer |> render_score(gamestate.score)
    renderer |> render_menu(gamestate.menu)
}